var currentColor = color(0, 0, 0);
var currentScene = 1;

//Khan Button class with mouseClicked function

var Button = function(config) {
    this.x = config.x || 0;
    this.y = config.y || 0;
    this.width = config.width || 100;
    this.height = config.height || 50;
    this.label = config.label || "Click";
    this.onClick = config.onClick || function() {};
    this.bg = config.bg || color(144, 219, 179);
};

Button.prototype.changeColor = function(newColor){
    this.bg = newColor;
    };

Button.prototype.draw = function() {
     fill(this.bg);
     rect(this.x, this.y, this.width, this.height, 5);
     fill(255, 255, 255);
     textSize(20);
     textAlign(LEFT, TOP);
     text(this.label, this.x + 20, this.y + this.height/4);
};

Button.prototype.isMouseInside = function() {
    return mouseX > this.x && mouseX < (this.x + this.width) && mouseY > this.y && mouseY < (this.y + this.height);
};

Button.prototype.handleMouseClick = function() {
    if (this.isMouseInside()) {
        this.onClick();
    }
};

// start button, when clicked it changes the scene and allows you to choose a shape to trace

var startButton = new Button({
    x: 150,
    y: 300,
    label: "Start!",
    onClick: function() {
        currentScene = 2;
    }
});
// Letter buttons for a square, cicle, and triangle

var SButton = new Button ({
    x: 100,
    y: 200,
    label: "Square",
    onClick: function() {
        currentScene = 3;
    }
});

var CButton = new Button ({
    x: 200,
    y: 200,
    label: "Circle",
    onClick: function() {
        currentScene = 4;
    }
});

var TButton = new Button ({
    x: 200,
    y: 300,
    label: "Triangle",
    onClick: function() {
        currentScene = 3;
    }
});

// color buttons, when click it sets the color to trace the letter

var Blue = new Button ({
    x: 0,
    y: 100,
    label: "Blue",
    onClick: function() {
        noStroke();
        fill(132, 146, 207);
    }
});
Blue.changeColor(color(237, 150, 201));

var Green = new Button ({
    x: 0,
    y: 200,
    label: "Green",
    onClick: function() {
        noStroke();
        fill(107, 173, 118);
    }
});
Green.changeColor(color(107, 173, 118));

var Brown = new Button ({
    x: 0,
    y: 300,
    label: "Brown",
    onClick: function() {
        noStroke();
        fill(122, 58, 73);
    }
});
Brown.changeColor(color(183, 114, 204));
    
//Sophia bitmoji 
var drawBitmoji = function (bitmojix, bitmojiy,bitmojiHeight)
{
noStroke();
fill(255, 205, 148);//skin color
ellipse(bitmojix, bitmojiy, bitmojiHeight/100*83, bitmojiHeight/100*100); //head
fill(255, 255, 255);
arc(bitmojix-(bitmojiHeight/100*38),bitmojiy+(bitmojiHeight/100*65),bitmojiHeight/100*41,bitmojiHeight/100*77, bitmojiHeight/100*-88,bitmojiHeight/100*328);// right face chisel
arc(bitmojix+(bitmojiHeight/100*32),bitmojiy+(bitmojiHeight/100*65),bitmojiHeight/100*28,bitmojiHeight/100*73,bitmojiHeight/100*-122,bitmojiHeight/100*328);
fill(120, 70, 70);
quad(bitmojix-(bitmojiHeight/100*37), bitmojiy+(bitmojiHeight/100*65),bitmojix-(bitmojiHeight/100*22),bitmojiy-(bitmojiHeight/100*43),bitmojix-(bitmojiHeight/100*42),bitmojiy-(bitmojiHeight/100*29),bitmojix-(bitmojiHeight/100*56),bitmojiy+(bitmojiHeight/100*58)); //right hair
ellipse(bitmojix-(bitmojiHeight/100*1),bitmojiy-(bitmojiHeight/100*39),bitmojiHeight/100*60,bitmojiHeight/100*23);// top hair
quad(bitmojix+(bitmojiHeight/100*37), bitmojiy+(bitmojiHeight/100*68),bitmojix+(bitmojiHeight/100*15),bitmojiy-(bitmojiHeight/100*46),bitmojix+(bitmojiHeight/100*37),bitmojiy-(bitmojiHeight/100*32),bitmojix+(bitmojiHeight/100*57),bitmojiy+(bitmojiHeight/100*59)); //left hair
fill(160,191,148);// eye color
ellipse(bitmojix-(bitmojiHeight/100*15),bitmojiy-(bitmojiHeight/100*5),bitmojiHeight/100*10,bitmojiHeight/100*6);// right eye
ellipse(bitmojix+(bitmojiHeight/100*10),bitmojiy-(bitmojiHeight/100*5),bitmojiHeight/100*10,bitmojiHeight/100*6);// left eye
stroke(0, 0, 0);
fill(255, 205, 148);//skin color
bezier(bitmojix-(bitmojiHeight/100*1),bitmojiy+(bitmojiHeight/100*3),bitmojix+(bitmojiHeight/100*18),bitmojiy+(bitmojiHeight/100*22),bitmojix-(bitmojiHeight/100*3),bitmojiy+(bitmojiHeight/100*18),bitmojix+(bitmojiHeight/100*1),bitmojiy+(bitmojiHeight/100*18));//nose
fill(247, 242, 242);// white for teeth
arc(bitmojix,bitmojiy+(bitmojiHeight/100*25),bitmojiHeight/100*30,bitmojiHeight/100*13,1,180);//mouth
line(bitmojix-(bitmojiHeight/100*16),bitmojiy+(bitmojiHeight/100*24),bitmojix+(bitmojiHeight/100*14),bitmojiy+(bitmojiHeight/100*24));//top of mouth
noStroke();
fill(169, 169, 169);
rect(bitmojix-(bitmojiHeight/100*56),bitmojiy+(bitmojiHeight/100*52),bitmojiHeight/100*112,bitmojiHeight/100*66);//shirt
ellipse(bitmojix+(bitmojiHeight/100*47),bitmojiy+(bitmojiHeight/100*81),bitmojiHeight/100*41,bitmojiHeight/100*70);// shoulder
ellipse(bitmojix-(bitmojiHeight/100*46),bitmojiy+(bitmojiHeight/100*81),bitmojiHeight/100*41,bitmojiHeight/100*70);//shoulder
stroke(0, 0, 0);
fill(59, 79, 130);//hat color
arc(bitmojix-(bitmojiHeight/100*2),bitmojiy-(bitmojiHeight/100*25),bitmojiHeight/100*83,bitmojiHeight/100*99,180,360);
quad(bitmojix-(bitmojiHeight/100*42),bitmojiy-(bitmojiHeight/100*28), bitmojix-(bitmojiHeight/100*51), bitmojiy-(bitmojiHeight/100*9), bitmojix+(bitmojiHeight/100*24), bitmojiy-(bitmojiHeight/100*10), bitmojix+(bitmojiHeight/100*40),bitmojiy-(bitmojiHeight/100*29));

fill(255, 255, 255);
textSize(bitmojiHeight/100*31);
text("SD",bitmojix-(bitmojiHeight/100*23), bitmojiy+(bitmojiHeight/100*69),bitmojiHeight/100*100,bitmojiHeight/100*67);
textSize (bitmojiHeight/100*33);
fill(201, 201, 201);
text("N",bitmojix-(bitmojiHeight/100*16),bitmojiy-(bitmojiHeight/100*56),bitmojiHeight/100*299,bitmojiHeight/100*177);
textSize(bitmojiHeight/100*30);
fill(245, 237, 245);
text("Y",bitmojix-(bitmojiHeight/100*14),bitmojiy-(bitmojiHeight/100*54),bitmojiHeight/100*305,bitmojiHeight/100*169);
};

//kaylee bitmoji

var drawBitmoji2 = function (x, y, bitmojiHeight){
noStroke();
fill (255,224,189); //skin tone
ellipse(x,y,bitmojiHeight/100*83,bitmojiHeight/100*100); //head
fill (236,213,167); //hair fill
quad(x-(bitmojiHeight/100*51),y+(bitmojiHeight/100*100),x-(bitmojiHeight/100*38),y- (bitmojiHeight/100*40),x+(bitmojiHeight/100*4),y-(bitmojiHeight/100*49),x-(bitmojiHeight/100*28),y+(bitmojiHeight/100*8)); //left hair
quad (x+(bitmojiHeight/100*53),y+(bitmojiHeight/100*102),x+(bitmojiHeight/100*48),y- (bitmojiHeight/100*37),x+(bitmojiHeight/100*4),y-(bitmojiHeight/100*50),x+(bitmojiHeight/100*32),y+(bitmojiHeight/100*2)); //right hair
ellipse(x+(bitmojiHeight/100*3),y-(bitmojiHeight/100*38),(bitmojiHeight/100*83),(bitmojiHeight/100*23)); //top hair
fill (133, 171, 206); //eye color
ellipse (x - (bitmojiHeight/100*10), y , (bitmojiHeight/100*9), (bitmojiHeight/100*6)); //left eye
ellipse (x + (bitmojiHeight/100*17), y , (bitmojiHeight/100*9), (bitmojiHeight/100*6)); //right eye
fill (255, 224, 189); //skin tone
stroke(0, 0, 0);
bezier (x, y + (bitmojiHeight/100*4) , x + (bitmojiHeight/100*18), y + (bitmojiHeight/100*22), x - (bitmojiHeight/100*6), y + (bitmojiHeight/100*15), x - (bitmojiHeight/100*3), y + (bitmojiHeight/100*15)); //nose
fill (255, 255, 255); //white teeth
arc(x + (bitmojiHeight/100*3) , y + (bitmojiHeight/100*25) , (bitmojiHeight/100*30), (bitmojiHeight/100*13), (bitmojiHeight/100*1), (180)); // mouth
line(x - (bitmojiHeight/100*14) ,y + (bitmojiHeight/100*24) ,x + (bitmojiHeight/100*19), y + (bitmojiHeight/100*24)); //top of mouth
noStroke(); 
fill (139,64, 0); //hat color
ellipse (x + (bitmojiHeight/100*3), y - (bitmojiHeight/100*37) , (bitmojiHeight/100*86), (bitmojiHeight/100*38)); // top of hat
rect (x - (bitmojiHeight/100*42), y - (bitmojiHeight/100*38), (bitmojiHeight/100*88), (bitmojiHeight/100*28)); // bottom of hat
fill (220, 202, 152); // shirt color
rect (x - (bitmojiHeight/100*59) , y + (bitmojiHeight/100*50) , (bitmojiHeight/100*127), (bitmojiHeight/100*71)); // shirt
ellipse (x - (bitmojiHeight/100*40), y + (bitmojiHeight/100*75), (bitmojiHeight/100*48), (bitmojiHeight/100*74)); //left shoulder
ellipse (x + (bitmojiHeight/100*49), y + (bitmojiHeight/100*75), (bitmojiHeight/100*48), (bitmojiHeight/100*74)); //right shoulder
fill (0, 0, 0); // text color
textSize ((bitmojiHeight/100*31));  // text size
text ("KB", x - (bitmojiHeight/100*15) , y + (bitmojiHeight/100*76), (bitmojiHeight/100*100), (bitmojiHeight/100*67)); //text 
}; 
